// ========================================
// ESQUEMA POSTGRESQL OPTIMIZADO
// Redis maneja cálculos geoespaciales
// PostgreSQL solo registra eventos procesados
// ========================================

// ========================================
// MÓDULO DE USUARIOS (LDAP) - SIN CAMBIOS
// ========================================

Table user_profiles {
  id integer [primary key, increment]
  ldap_uid varchar(50) [unique, not null]
  dni varchar(8) [unique]
  user_type varchar(20) [not null, note: 'CONDUCTOR, ADMINISTRADOR, MONITOREADOR']
  is_active boolean [default: true]
  last_login timestamp
  preferences jsonb
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (ldap_uid) [name: 'idx_profiles_ldap_uid']
    (user_type, is_active) [name: 'idx_profiles_type_active']
  }
}

Table drivers {
  id integer [primary key, increment]
  user_profile_id integer [ref: > user_profiles.id, unique]
  driver_license varchar(20) [not null, unique]
  license_type varchar(10) [not null]
  license_expiry date [not null]
  status varchar(20) [default: 'ACTIVE']
  current_vehicle_id integer [ref: > vehicles.id]
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (status, license_expiry) [name: 'idx_drivers_status_license']
    (current_vehicle_id) [name: 'idx_drivers_current_vehicle']
  }
}

// ========================================
// MÓDULO DE RUTAS Y VEHÍCULOS - SIMPLIFICADO
// ========================================

Table routes {
  id integer [primary key, increment]
  name varchar(100) [not null]
  code varchar(20) [not null, unique]
  color varchar(7) [default: '#0066CC']
  is_active boolean [default: true]
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table route_polylines {
  id integer [primary key, increment]
  route_id integer [ref: > routes.id, not null]
  name varchar(100) [not null, note: 'Ruta A1 - Ida, Ruta A1 - Vuelta']
  direction varchar(20) [not null, note: 'IDA, VUELTA, BIDIRECCIONAL']
  
  // Coordenadas para visualización y validación JTS
  coordinates_json jsonb [not null, note: 'Array: [[lat,lng], [lat,lng], ...] para JTS']
  encoded_polyline text [note: 'Google encoded polyline para optimización web']
  
  // Configuración visual para mapas
  color varchar(7) [note: 'Color específico (hereda de ruta si es null)']
  stroke_width integer [default: 4]
  stroke_opacity decimal(3,2) [default: 0.8]
  
  // Metadatos calculados
  total_distance_km decimal(6,2) [note: 'Distancia total automática']
  estimated_time_minutes integer [note: 'Tiempo estimado de recorrido']
  
  // Para validación de desvíos con JTS
  corridor_width_meters integer [default: 100, note: 'Ancho del corredor permitido']
  deviation_tolerance_meters integer [default: 50, note: 'Tolerancia antes de alerta']
  
  // Control de sincronización con Redis/JTS - MEJORADO
  geometry_hash varchar(64) [note: 'SHA256 de coordinates_json para detectar cambios']
  config_hash varchar(64) [note: 'SHA256 de configuración completa (color, width, etc.)']
  jts_cached_at timestamp [note: 'Última vez que se cacheó geometría JTS en memoria']
  redis_synced_at timestamp [note: 'Última sincronización a Redis']
  redis_sync_key varchar(100) [note: 'Clave en Redis para geometría']
  
  is_active boolean [default: true]
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
  created_by_profile_id integer [ref: > user_profiles.id]
  
  indexes {
    (route_id, direction, is_active) [name: 'idx_polylines_route_direction']
    (is_active, redis_synced_at) [name: 'idx_polylines_sync_status']
    (redis_sync_key) [name: 'idx_polylines_redis_key']
    (geometry_hash, config_hash) [name: 'idx_polylines_hashes']
  }
  
  Note: 'Polilíneas de rutas para visualización y validación de desvíos con JTS'
}

Table vehicles {
  id integer [primary key, increment]
  plate_number varchar(10) [not null, unique]
  internal_code varchar(20) [not null, unique]
  route_id integer [ref: > routes.id]
  status varchar(20) [default: 'ACTIVE']
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table trackers {
  id integer [primary key, increment]
  device_id varchar(50) [not null, unique]
  vehicle_id integer [ref: > vehicles.id]
  posting_interval integer [default: 30]
  status varchar(20) [default: 'ACTIVE']
  last_seen timestamp
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
}

// ========================================
// GEOCERCAS - CONFIGURACIÓN MASTER
// Solo para administración, Redis maneja operaciones
// ========================================

Table geofence_types {
  id integer [primary key, increment]
  name varchar(50) [unique, not null, note: 'BUS_STOP, TERMINAL, SPEED_ZONE, ROUTE_CORRIDOR']
  display_name varchar(100) [not null]
  default_alert_priority varchar(10) [default: 'MEDIUM']
  color varchar(7) [default: '#FF0000']
  is_active boolean [default: true]
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table geofences {
  id integer [primary key, increment]
  name varchar(100) [not null]
  geofence_type_id integer [ref: > geofence_types.id]
  route_id integer [ref: > routes.id, note: 'Opcional: para filtrar por ruta']
  
  // Geometría simple para Redis sync
  geometry_type varchar(20) [not null, note: 'CIRCLE, POLYGON']
  center_latitude decimal(10,8) [note: 'Centro para círculos o centroide para polígonos']
  center_longitude decimal(11,8)
  radius_meters integer [note: 'Radio para círculos']
  coordinates_json jsonb [note: 'Array de coordenadas para polígonos: [[lat,lng],...]']
  
  // Configuración de alertas (se sincroniza a Redis)
  alert_on_entry boolean [default: false]
  alert_on_exit boolean [default: true]
  alert_on_dwell boolean [default: false]
  max_dwell_seconds integer [default: 300]
  alert_priority varchar(10) [default: 'MEDIUM']
  
  // CONFIGURACIÓN DE VELOCIDAD
  max_speed_kmh integer [note: 'Velocidad máxima en esta geocerca (hereda de speed_zone si es null)']
  min_speed_kmh integer [note: 'Velocidad mínima requerida']
  speed_alert_enabled boolean [default: true]
  speed_tolerance_kmh integer [default: 5, note: 'Tolerancia antes de generar alerta']
  
  // Configuración operativa
  applies_to_routes jsonb [note: 'Array de route_ids: [1,2,3]']
  
  // Control de sincronización con Redis - MEJORADO
  config_hash varchar(64) [note: 'SHA256 de toda la configuración para detectar cambios']
  redis_sync_key varchar(100) [note: 'Clave en Redis: "gf:123"']
  redis_synced_at timestamp [note: 'Última sincronización exitosa a Redis']
  jts_cached_at timestamp [note: 'Última vez que se cacheó geometría JTS (para polígonos)']
  
  is_active boolean [default: true]
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
  created_by_profile_id integer [ref: > user_profiles.id]
  
  indexes {
    (geofence_type_id, is_active) [name: 'idx_geofences_type_active']
    (is_active, redis_synced_at) [name: 'idx_geofences_sync_status']
    (redis_sync_key) [name: 'idx_geofences_redis_key']
    (config_hash) [name: 'idx_geofences_config_hash']
  }
  
  Note: 'Configuración master de geocercas - se sincroniza a Redis para operaciones'
}

Table bus_stops {
  id integer [primary key, increment]
  name varchar(100) [not null]
  code varchar(20) [unique]
  route_id integer [ref: > routes.id]
  latitude decimal(10,8) [not null]
  longitude decimal(11,8) [not null]
  stop_order integer
  geofence_id integer [ref: > geofences.id]
  
  // Configuración específica del paradero
  is_terminal boolean [default: false]
  min_stop_seconds integer [default: 30]
  max_stop_seconds integer [default: 300]
  
  is_active boolean [default: true]
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (route_id, stop_order) [name: 'idx_stops_route_order']
    (geofence_id) [name: 'idx_stops_geofence']
  }
}

// ========================================
// EVENTOS PROCESADOS - SOLO RESULTADOS
// Redis + JTS procesan, PostgreSQL registra
// ========================================

Table geofence_events {
  id bigint [primary key, increment]
  geofence_id integer [not null, ref: > geofences.id]
  vehicle_id integer [not null, ref: > vehicles.id]
  tracker_id integer [not null, ref: > trackers.id]
  driver_profile_id integer [ref: > user_profiles.id]
  
  // Evento procesado
  event_type varchar(20) [not null, note: 'ENTRY, EXIT, DWELL_VIOLATION']
  latitude decimal(10,8) [not null]
  longitude decimal(11,8) [not null]
  speed decimal(5,2)
  heading integer
  
  // Timestamps del evento
  event_timestamp timestamp [not null, note: 'Momento del evento GPS']
  entry_timestamp timestamp [note: 'Para eventos EXIT - cuándo entró']
  dwell_seconds integer [note: 'Tiempo dentro de la geocerca']
  
  // Metadatos de procesamiento
  processing_method varchar(20) [note: 'REDIS_ONLY, REDIS_JTS, JTS_VALIDATION']
  processing_latency_ms integer [note: 'Tiempo de procesamiento']
  redis_distance_meters decimal(8,2) [note: 'Distancia calculada por Redis']
  jts_validation_result boolean [note: 'Resultado de validación JTS si aplicó']
  
  // Estado de alerta
  alert_generated boolean [default: false]
  alert_priority varchar(10)
  acknowledged boolean [default: false]
  acknowledged_by_profile_id integer [ref: > user_profiles.id]
  acknowledged_at timestamp
  
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (vehicle_id, event_timestamp) [name: 'idx_geofence_events_vehicle_time']
    (geofence_id, event_timestamp) [name: 'idx_geofence_events_fence_time']
    (event_type, alert_generated) [name: 'idx_geofence_events_alerts']
    (acknowledged, alert_priority) [name: 'idx_geofence_events_pending']
    (created_at) [name: 'idx_geofence_events_created'] // Para particionado
  }
  
  Note: 'Eventos de geocercas YA PROCESADOS por Redis+JTS - solo registro'
}

// Particionado por fecha para mejor performance
// PARTITION BY RANGE (created_at);

Table bus_stop_events {
  id bigint [primary key, increment]
  bus_stop_id integer [not null, ref: > bus_stops.id]
  vehicle_id integer [not null, ref: > vehicles.id]
  driver_profile_id integer [ref: > user_profiles.id]
  
  // Datos del evento de paradero
  event_type varchar(20) [not null, note: 'ARRIVAL, DEPARTURE, DWELL_VIOLATION, SKIP']
  arrival_timestamp timestamp [note: 'Llegada al paradero']
  departure_timestamp timestamp [note: 'Salida del paradero']
  dwell_seconds integer [note: 'Tiempo de permanencia']
  
  // Datos de posición
  arrival_latitude decimal(10,8)
  arrival_longitude decimal(11,8)
  departure_latitude decimal(10,8)
  departure_longitude decimal(11,8)
  
  // Cumplimiento de itinerario
  scheduled_arrival timestamp [note: 'Hora programada de llegada']
  delay_seconds integer [note: 'Retraso en segundos (+ tarde, - temprano)']
  compliance_status varchar(20) [note: 'ON_TIME, LATE, EARLY, SKIPPED']
  
  // Metadatos
  processing_source varchar(20) [default: 'GEOFENCE_SYSTEM']
  notes text
  
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (bus_stop_id, arrival_timestamp) [name: 'idx_bus_stop_events_stop_time']
    (vehicle_id, arrival_timestamp) [name: 'idx_bus_stop_events_vehicle_time']
    (compliance_status, created_at) [name: 'idx_bus_stop_events_compliance']
  }
  
  Note: 'Eventos específicos de paraderos derivados de geofence_events'
}

Table speed_violations {
  id bigint [primary key, increment]
  vehicle_id integer [not null, ref: > vehicles.id]
  tracker_id integer [not null, ref: > trackers.id]
  driver_profile_id integer [ref: > user_profiles.id]
  geofence_id integer [ref: > geofences.id, note: 'Zona de velocidad específica']
  
  // Datos de la violación
  violation_type varchar(20) [not null, note: 'SPEED_LIMIT, RECKLESS_DRIVING']
  recorded_speed decimal(5,2) [not null]
  speed_limit decimal(5,2) [not null]
  excess_speed decimal(5,2) [not null, note: 'Velocidad que excede el límite']
  
  // Ubicación
  latitude decimal(10,8) [not null]
  longitude decimal(11,8) [not null]
  
  // Duración de la violación
  start_timestamp timestamp [not null]
  end_timestamp timestamp
  duration_seconds integer
  
  // Severidad automática
  severity varchar(20) [note: 'MINOR, MODERATE, SEVERE, CRITICAL']
  
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (vehicle_id, start_timestamp) [name: 'idx_speed_violations_vehicle_time']
    (severity, created_at) [name: 'idx_speed_violations_severity']
    (geofence_id, start_timestamp) [name: 'idx_speed_violations_zone_time']
  }
  
  Note: 'Violaciones de velocidad detectadas y procesadas'
}

Table route_deviations {
  id bigint [primary key, increment]
  vehicle_id integer [not null, ref: > vehicles.id]
  route_id integer [not null, ref: > routes.id]
  driver_profile_id integer [ref: > user_profiles.id]
  
  // Datos del desvío
  deviation_type varchar(20) [not null, note: 'MINOR_DEVIATION, MAJOR_DEVIATION, UNAUTHORIZED_ROUTE']
  start_latitude decimal(10,8) [not null]
  start_longitude decimal(11,8) [not null]
  end_latitude decimal(10,8)
  end_longitude decimal(11,8)
  
  // Tiempo del desvío
  start_timestamp timestamp [not null]
  end_timestamp timestamp
  duration_seconds integer
  
  // Distancia del desvío
  max_deviation_meters decimal(8,2) [note: 'Máxima distancia de la ruta autorizada']
  total_deviation_distance decimal(8,2) [note: 'Distancia total del desvío']
  
  // Estado
  is_authorized boolean [default: false, note: 'Desvío autorizado por control']
  authorized_by_profile_id integer [ref: > user_profiles.id]
  authorization_reason text
  
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (vehicle_id, start_timestamp) [name: 'idx_route_deviations_vehicle_time']
    (route_id, start_timestamp) [name: 'idx_route_deviations_route_time']
    (is_authorized, duration_seconds) [name: 'idx_route_deviations_unauthorized']
  }
  
  Note: 'Desvíos de ruta detectados por validación JTS de corredores'
}

// ========================================
// HISTÓRICO GPS - SOLO PARA REPORTES
// Redis maneja tiempo real, PostgreSQL historial
// ========================================

Table location_history {
  id bigint [primary key, increment]
  tracker_id integer [not null, ref: > trackers.id]
  vehicle_id integer [not null, ref: > vehicles.id] // Desnormalizado
  latitude decimal(10,8) [not null]
  longitude decimal(11,8) [not null]
  speed decimal(5,2) [default: 0]
  heading integer
  timestamp timestamp [not null]
  received_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  // Solo datos esenciales para reportes históricos
  // Eliminamos: accuracy, satellites, battery_level, etc.
  
  indexes {
    (vehicle_id, timestamp) [name: 'idx_location_history_vehicle_time']
    (timestamp) [name: 'idx_location_history_timestamp'] // Para particionado
  }
  
  Note: 'Histórico GPS simplificado - para reportes y análisis posterior'
}
// PARTITION BY RANGE (timestamp); // Particionado mensual

// ========================================
// ALERTAS Y EVENTOS DEL SISTEMA
// ========================================

Table system_alerts {
  id bigint [primary key, increment]
  alert_type varchar(50) [not null, note: 'GEOFENCE_VIOLATION, SPEED_VIOLATION, ROUTE_DEVIATION, PANIC_BUTTON']
  source_table varchar(50) [note: 'Tabla de origen: geofence_events, speed_violations, etc.']
  source_id bigint [note: 'ID del registro de origen']
  
  vehicle_id integer [not null, ref: > vehicles.id]
  driver_profile_id integer [ref: > user_profiles.id]
  
  priority varchar(10) [not null, note: 'LOW, MEDIUM, HIGH, CRITICAL']
  title varchar(200) [not null]
  description text
  
  // Estado de la alerta
  status varchar(20) [default: 'ACTIVE', note: 'ACTIVE, ACKNOWLEDGED, RESOLVED, DISMISSED']
  acknowledged_by_profile_id integer [ref: > user_profiles.id]
  acknowledged_at timestamp
  resolved_at timestamp
  
  // Datos adicionales
  metadata jsonb [note: 'Datos específicos según tipo de alerta']
  
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (status, priority, created_at) [name: 'idx_alerts_active_priority']
    (vehicle_id, created_at) [name: 'idx_alerts_vehicle_time']
    (alert_type, created_at) [name: 'idx_alerts_type_time']
  }
  
  Note: 'Alertas consolidadas del sistema - todas las fuentes'
}

Table panic_alerts {
  id bigint [primary key, increment]
  tracker_id integer [not null, ref: > trackers.id]
  vehicle_id integer [not null, ref: > vehicles.id]
  driver_profile_id integer [ref: > user_profiles.id]
  
  latitude decimal(10,8) [not null]
  longitude decimal(11,8) [not null]
  
  status varchar(20) [default: 'ACTIVE', note: 'ACTIVE, ACKNOWLEDGED, RESOLVED, FALSE_ALARM']
  priority varchar(10) [default: 'CRITICAL']
  
  acknowledged_by_profile_id integer [ref: > user_profiles.id]
  acknowledged_at timestamp
  resolved_at timestamp
  resolution_notes text
  
  created_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (status, created_at) [name: 'idx_panic_status_time']
    (vehicle_id, created_at) [name: 'idx_panic_vehicle_time']
  }
}

// ========================================
// CONFIGURACIÓN DEL SISTEMA
// ========================================

Table redis_sync_log {
  id integer [primary key, increment]
  sync_type varchar(50) [not null, note: 'GEOFENCES_FULL, GEOFENCE_UPDATE, POLYLINE_UPDATE, CONFIG_CHANGE']
  table_name varchar(50) [not null]
  record_id integer
  redis_key varchar(200)
  
  // Hash para detectar cambios
  old_hash varchar(64) [note: 'Hash anterior del registro']
  new_hash varchar(64) [note: 'Hash nuevo del registro']
  change_type varchar(20) [note: 'CREATE, UPDATE, DELETE, NO_CHANGE']
  
  status varchar(20) [not null, note: 'SUCCESS, FAILED, PARTIAL']
  error_message text
  records_processed integer [default: 0]
  
  started_at timestamp [not null]
  completed_at timestamp
  duration_ms integer
  
  Note: 'Log de sincronización entre PostgreSQL y Redis con control de cambios'
}

Table system_config {
  id integer [primary key, increment]
  config_key varchar(100) [unique, not null]
  config_value text [not null]
  description text
  data_type varchar(20) [default: 'STRING', note: 'STRING, INTEGER, BOOLEAN, JSON']
  
  updated_by_profile_id integer [ref: > user_profiles.id]
  updated_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  Note: 'Configuración global del sistema'
}

// ========================================
// VISTAS PARA REPORTES OPTIMIZADOS
// ========================================

/*
// Vista consolidada de eventos por vehículo
CREATE VIEW vehicle_events_summary AS
SELECT 
  v.id as vehicle_id,
  v.plate_number,
  COUNT(ge.id) as total_geofence_events,
  COUNT(CASE WHEN ge.event_type = 'ENTRY' THEN 1 END) as entries,
  COUNT(CASE WHEN ge.event_type = 'EXIT' THEN 1 END) as exits,
  COUNT(sv.id) as speed_violations,
  COUNT(rd.id) as route_deviations,
  MAX(ge.event_timestamp) as last_event
FROM vehicles v
LEFT JOIN geofence_events ge ON v.id = ge.vehicle_id
LEFT JOIN speed_violations sv ON v.id = sv.vehicle_id  
LEFT JOIN route_deviations rd ON v.id = rd.vehicle_id
WHERE ge.event_timestamp >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY v.id, v.plate_number;

// Vista de alertas pendientes
CREATE VIEW pending_alerts AS
SELECT 
  sa.id,
  sa.alert_type,
  sa.priority,
  sa.title,
  v.plate_number,
  sa.created_at,
  EXTRACT(EPOCH FROM (NOW() - sa.created_at))/60 as minutes_ago
FROM system_alerts sa
JOIN vehicles v ON sa.vehicle_id = v.id
WHERE sa.status = 'ACTIVE'
ORDER BY sa.priority DESC, sa.created_at ASC;
*/